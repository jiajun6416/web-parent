<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.jiajun</groupId>
  <artifactId>parent</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>pom</packaging>
  
  
  	<!-- 集中定义依赖版本号 -->
	<properties>
		<junit.version>4.12</junit.version>
		<spring.version>4.2.5.RELEASE</spring.version>
		<mybatis.version>3.4.1</mybatis.version>
		<mybatis.spring.version>1.3.0</mybatis.spring.version>
		<mybatis.paginator.version>1.2.15</mybatis.paginator.version>
		<hibernate.version>4.3.6.Final</hibernate.version>
		<hibernate-validator>5.1.3.Final</hibernate-validator>
		<struts2.version>2.3.8</struts2.version>
		<struts2_json.version>2.3.8</struts2_json.version>
		<druid.version>1.0.9</druid.version>
		<c3p0.version>0.9.1.2</c3p0.version>
		<mysql.version>5.1.32</mysql.version>
		<oracle.version>11.2.0.1.0</oracle.version>
		<slf4j-log4j.version>1.7.5</slf4j-log4j.version>
		<logging-version>1.2</logging-version>
		<jackson.version>2.4.2</jackson.version>
		<jsonlib.version>2.4</jsonlib.version>
		<httpclient.version>4.3.5</httpclient.version>
		<jstl.version>1.2</jstl.version>
		<javax.servlet.version>3.0.1</javax.servlet.version>
		<jsp-api.version>2.2</jsp-api.version>
		<beanutils.version>1.9.3</beanutils.version>
		<joda-time.version>2.5</joda-time.version>
		<commons-lang3.version>3.3.2</commons-lang3.version>
		<commons-io.version>1.3.2</commons-io.version>
		<commons-net.version>3.3</commons-net.version>
		<jsqlparser.version>0.9.1</jsqlparser.version>
		<commons-fileupload.version>1.3.1</commons-fileupload.version>
		<solrj.version>4.10.3</solrj.version>
		<mail-version>1.4.7</mail-version>
		<poi.version>3.16</poi.version>
		<quartz.version>2.1.1</quartz.version>
		<!-- activieMQ -->
		<activeMQ-version>5.14.5</activeMQ-version>
		<shiro.version>1.3.2</shiro.version>  
		<ehcache.version>3.0.1</ehcache.version>
		<!-- websocket.version -->
		<websocket.version>1.3.0</websocket.version>
		<jdk-websocket>1.0</jdk-websocket>
		<spring-redis.version>1.7.5.RELEASE</spring-redis.version>
		<jedis.version>2.8.0</jedis.version>
	</properties>

	
	<dependencyManagement>
		<dependencies>
			<!-- Spring -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-context</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<dependency>
		         <groupId>org.springframework</groupId>
		         <artifactId>spring-context-support</artifactId>
		         <version>${spring.version}</version>
		    </dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-beans</artifactId>
				<version>${spring.version}</version>
			</dependency>
	        <dependency>
            <groupId>org.springframework</groupId>
            	<artifactId>spring-web</artifactId>
            	<version>${spring.version}</version>
       		</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-webmvc</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<dependency>  
	            <groupId>org.springframework</groupId>  
	            <artifactId>spring-test</artifactId>  
	            <version>${spring.version}</version>
	            <scope>test</scope>  
	        </dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-jdbc</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-aspects</artifactId>
				<version>${spring.version}</version>
			</dependency>

			<!-- Mybatis -->
			<dependency>
				<groupId>org.mybatis</groupId>
				<artifactId>mybatis</artifactId>
				<version>${mybatis.version}</version>
			</dependency>
			<dependency>
				<groupId>org.mybatis</groupId>
				<artifactId>mybatis-spring</artifactId>
				<version>${mybatis.spring.version}</version>
			</dependency>
			<dependency>
				<groupId>com.github.miemiedev</groupId>
				<artifactId>mybatis-paginator</artifactId>
				<version>${mybatis.paginator.version}</version>
			</dependency>
		
			<!-- hibernate -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-orm</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<dependency>
				<groupId>org.hibernate</groupId>
				<artifactId>hibernate-core</artifactId>
				<version>${hibernate.version}</version>
			</dependency>
			 <!-- 使用hibernate的对字段进行约束 -->
			 <dependency>
	            <groupId>org.hibernate</groupId>
	            <artifactId>hibernate-validator</artifactId>
	            <version>${hibernate-validator}</version>
	         </dependency>

    	   <!-- struts2 -->
	       <dependency>
	           <groupId>org.apache.struts</groupId>
	             <artifactId>struts2-core</artifactId>
	             <version>${struts2.version}</version>
	             <!-- 如果使用了hibernate的话需要 exclusions 是排除包，因为 Struts2中有javassist，Hibernate中也有javassist,
	               	所以如果要整合Hibernate，一定要排除掉Struts2中的javassist，否则就冲突了。-->
	             <exclusions>
	               <exclusion>
	                   <groupId>javassist</groupId>
	                   <artifactId>javassist</artifactId>
	               </exclusion>
	             </exclusions> 
	       </dependency>
	       <!-- strtuts2的注解开发-->
	       <dependency>
	            <groupId>org.apache.struts</groupId>
	            <artifactId>struts2-convention-plugin</artifactId>
	            <version>${struts2.version}</version>
	        </dependency>
	        <!-- Struts2和Spring整合插件 -->
	        <dependency>
	            <groupId>org.apache.struts</groupId>
	            <artifactId>struts2-spring-plugin</artifactId>
	            <version>${struts2.version}</version>
	        </dependency>
	        <!-- struts2-json -->
	       <dependency>
	           <groupId>org.apache.struts</groupId>
	           <artifactId>struts2-json-plugin</artifactId>
	           <version>${struts2_json.version}</version>
	       </dependency>
       

			<!-- JSP相关 -->
			<dependency>
				<groupId>jstl</groupId>
				<artifactId>jstl</artifactId>
				<version>${jstl.version}</version>
			</dependency>
			<dependency>
			    <groupId>javax.servlet</groupId>
			    <artifactId>javax.servlet-api</artifactId>
			    <version>${javax.servlet.version}</version>
			    <scope>provided</scope>
			</dependency>
			<dependency> 
			   <groupId>javax.servlet.jsp</groupId> 
			   <artifactId>jsp-api</artifactId> 
			   <version>${jsp-api.version}</version> 
			   <scope>provided</scope>
			</dependency>
				
			<!-- MySql -->
			<dependency>
				<groupId>mysql</groupId>
				<artifactId>mysql-connector-java</artifactId>
				<version>${mysql.version}</version>
			</dependency>
			
			<!-- oracle -->
			<dependency>
			  	<groupId>com.oracle</groupId>
  				  <artifactId>ojdbc6</artifactId>
   				 <version>${oracle.version}</version>
			</dependency>
			<!-- 连接池 -->
			<dependency>
				<groupId>com.alibaba</groupId>
				<artifactId>druid</artifactId>
				<version>${druid.version}</version>
			</dependency>
			
			<dependency>
			    <groupId>c3p0</groupId>
			    <artifactId>c3p0</artifactId>
			    <version>${c3p0.version}</version>
			</dependency>
			<!-- Apache工具组件 -->
			<dependency>
				<groupId>org.apache.commons</groupId>
				<artifactId>commons-lang3</artifactId>
				<version>${commons-lang3.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.commons</groupId>
				<artifactId>commons-io</artifactId>
				<version>${commons-io.version}</version>
			</dependency>
			<dependency>
				<groupId>commons-net</groupId>
				<artifactId>commons-net</artifactId>
				<version>${commons-net.version}</version>
			</dependency>
			
			<!-- 日志组件 -->
			<!-- 使用slf4j+log4导入, 会导入slf4j lg4j  slf4j-log4j--> 
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-log4j12</artifactId>
				<version>${slf4j-log4j.version}</version>
			</dependency>
			
			<!-- 使用comming-logging+jdk导入 -->
			<dependency>
			    <groupId>commons-logging</groupId>
			    <artifactId>commons-logging</artifactId>
			    <version>${logging-version}</version>
			</dependency>		
			
			<!-- 需要手动封装参数导入 -->
			<dependency>
			    <groupId>commons-beanutils</groupId>
			    <artifactId>commons-beanutils</artifactId>
			    <version>${beanutils.version}</version>
			</dependency>
			
			<!-- 文件上传组件 -->
			<dependency>
				<groupId>commons-fileupload</groupId>
				<artifactId>commons-fileupload</artifactId>
				<version>${commons-fileupload.version}</version>
			</dependency>
			
			<!-- Jackson导入, 推荐使用 -->
			<dependency>
				<groupId>com.fasterxml.jackson.core</groupId>
				<artifactId>jackson-databind</artifactId>
				<version>${jackson.version}</version>
			</dependency>
			
			<!-- json-lib导入, 效率远低于jackson,不推荐使用 -->
			<dependency>    
			    <groupId>net.sf.json-lib</groupId>    
			    <artifactId>json-lib</artifactId>    
			    <version>${jsonlib.version}</version>    
			    <classifier>jdk15</classifier>    
			</dependency> 
			
			<!-- 单元测试 -->
			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>${junit.version}</version>
				<scope>test</scope>
			</dependency>
			
			<!-- 时间操作组件 -->
			<dependency>
				<groupId>joda-time</groupId>
				<artifactId>joda-time</artifactId>
				<version>${joda-time.version}</version>
				<classifier>jdk15</classifier> 
			</dependency>
			
			<!-- httpclient -->
			<dependency>
				<groupId>org.apache.httpcomponents</groupId>
				<artifactId>httpclient</artifactId>
				<version>${httpclient.version}</version>
			</dependency>
		
			<!-- apache poi组件 -->
			<dependency>
			    <groupId>org.apache.poi</groupId>
			    <artifactId>poi-ooxml</artifactId>
			    <version>${poi.version}</version>
			</dependency>
		
			<!-- 发送邮件组件 -->
			<dependency>  
			    <groupId>javax.mail</groupId>  
			    <artifactId>mail</artifactId>  
			    <version>${mail-version}</version>  
			</dependency> 
			
			<!-- solr客户端 -->
			<dependency>
				<groupId>org.apache.solr</groupId>
				<artifactId>solr-solrj</artifactId>
				<version>${solrj.version}</version>
			</dependency>
			
			<!-- spring和jms整合包 -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-jms</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<!-- activeMQ, 引用需要的,防止jar包冲突和mq连接池 -->
			<dependency>
	            <groupId>org.apache.activemq</groupId>
	            <artifactId>activemq-client</artifactId>
	            <version>${activeMQ-version}</version>
	        </dependency>
	       <!--  <dependency>
	            <groupId>org.apache.activemq</groupId>
	            <artifactId>activemq-all</artifactId>
	            <version>${activeMQ-version}</version>
	        </dependency> -->
			<dependency>
				<groupId>org.apache.activemq</groupId>
				<artifactId>activemq-pool</artifactId>
				<version>${activeMQ-version}</version>			
			</dependency>
			
			<!-- quartz定时器 -->
			<dependency>
			    <groupId>org.quartz-scheduler</groupId>
			    <artifactId>quartz</artifactId>
			    <version>${quartz.version}</version>
			</dependency>
			
		 <!-- ehcache -->
		  <dependency>  
			  <groupId>org.ehcache</groupId>
			  <artifactId>ehcache</artifactId>
		    <version>${ehcache.version}</version>  
		  </dependency>     
		      
        <!-- shiro -->  
        <dependency>  
            <groupId>org.apache.shiro</groupId>  
            <artifactId>shiro-core</artifactId>  
            <version>${shiro.version}</version>  
        </dependency>  
        <dependency>  
            <groupId>org.apache.shiro</groupId>  
            <artifactId>shiro-web</artifactId>  
            <version>${shiro.version}</version>  
        </dependency>  
        <dependency>  
            <groupId>org.apache.shiro</groupId>  
            <artifactId>shiro-spring</artifactId>  
            <version>${shiro.version}</version>  
	   </dependency> 
          <dependency>
		  <groupId>org.apache.shiro</groupId>
		  <artifactId>shiro-aspectj</artifactId>
		  <version>${shiro.version}</version>
		</dependency>
     	<dependency>
		  <groupId>org.apache.shiro</groupId>
		  <artifactId>shiro-ehcache</artifactId>
		  <version>${shiro.version}</version>
		</dependency>
	     <dependency>
		  <groupId>org.apache.shiro</groupId>
		  <artifactId>shiro-spring</artifactId>
		  <version>${shiro.version}</version>
		 </dependency>   
        <!-- tomcat7+自带的两种websockt实现 -->
		<!-- 继承websocktServlet, 优点是可以自定义端口 -->
		  <dependency>
		    <groupId>org.java-websocket</groupId>
		    <artifactId>Java-WebSocket</artifactId>
		    <version>${websocket.version}</version>
		     <scope>provided</scope>
		</dependency>      
		<!-- 注解 ws-->
		<dependency>
		    <groupId>javax.websocket</groupId>
		    <artifactId>javax.websocket-api</artifactId>
		    <version>${jdk-websocket}</version>
		    <scope>provided</scope>
		</dependency>
	    <!-- spring-websocket -->
	    <dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-websocket</artifactId>
			<version>${spring.version}</version>
		</dependency>	
		<!-- jedis -->
		<dependency>
			<groupId>redis.clients</groupId>
			<artifactId>jedis</artifactId>
			<version>${jedis.version}</version>
		</dependency>		    
		<!-- spring对redis客户端jedis的封装 -->
		 <dependency>
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-redis</artifactId>
			<version>${spring-redis.version}</version>
		</dependency>
		
	
		</dependencies>
	</dependencyManagement>
	
	<dependencies>
		<!-- 强制依赖 -->
	</dependencies>
	
	<build>
		<finalName>${project.artifactId}</finalName>
		<plugins>
			<!-- maven默认是将resource下的资源拷贝到classpath下, 使用这个插件可以修改位置,和导入其他资源 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.7</version>
				<configuration>
					<encoding>UTF-8</encoding>
				</configuration>
			</plugin>
			<!-- java编译插件, 编译的时候会使用1.8的jdk -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.2</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
					<encoding>UTF-8</encoding>
				</configuration>
			</plugin>
		</plugins>

		<!-- 依赖的插件管理, 和jar依赖管理一样 -->
		<pluginManagement>
		
		    <!-- 热部署, 运行  tomcat7:redeploy -->
<!-- 			<build>
				<plugins>
					配置Tomcat插件
					<plugin>
						<groupId>org.apache.tomcat.maven</groupId>
						<artifactId>tomcat7-maven-plugin</artifactId>
						<version>2.2</version>
				        <configuration>
							远端tomcat的后台管理入口
			                <url>http://192.168.1.201:8080/manager/text</url>
			  		        部署项目包名, 如果不写的话则是 / 代表root.war, 需要把自带的删除能部署
			                <path>/websokcet</path>
			                也可以选择在maven.setting中设置登录用户名和密码
			                <username>deployer</username>
			                <password>deployer</password>
			                部署项目端口号,好像并没有用, 因为是热部署
			                <port>8080</port>
			                <encoding>utf-8</encoding>
		       				<uriEncoding>utf-8</uriEncoding>
				        </configuration>
					</plugin>
				</plugins>
			</build> -->
		
		</pluginManagement>
		
	</build>
  
  
</project>